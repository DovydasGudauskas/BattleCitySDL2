#include <SDL.h>
#include <vector>
#include <Windows.h>
#include <list>
#include <string>

using namespace std;

int CurrentRes = 600;
float Scale = CurrentRes / 864.;

class SpriteRenderer
{
private: 
	SDL_Rect Texture;//Position and dimensions of texture
	SDL_Rect Rect;//Position and dimensions of sprite
	SDL_Rect ScaledRect;//Scaled position and dimensions of sprite

public: 
	bool IsMarkedForDeletion = false;

	void SetTexture(SDL_Rect Tex) { Texture = Tex; }
	void SetPosition(SDL_Rect Position) { Rect = Position; }
	void SetScaledPosition(SDL_Rect ScaledPosition) { ScaledRect = ScaledPosition; }
	void SetAllValues(SpriteRenderer OldRenderer)
	{ 
		IsMarkedForDeletion = false;
		Texture = OldRenderer.GetTexture();
		Rect = OldRenderer.GetPosition();
		ResetScaledPosition();
	}

	SDL_Rect GetTexture() { return Texture; }
	SDL_Rect GetPosition() { return Rect; }
	SDL_Rect GetScaledPosition(){ return ScaledRect;}

	void ResetScaledPosition()
	{
		ScaledRect.x = 0;
		ScaledRect.y = 0;
		ScaledRect.w = 0;
		ScaledRect.h = 0;
	}

	void ScalePosition()
	{
		ScaledRect.x = Rect.x * Scale;
		ScaledRect.y = Rect.y * Scale;
		ScaledRect.w = Rect.w * Scale;
		ScaledRect.h = Rect.h * Scale;
	}
};

//Colour yellow-white-green-red
//Line 0-7
//Collum 0-7
vector<vector<vector<SDL_Rect>>> AllTankSprites;
vector<SDL_Rect> BulletSprites;

vector<SpriteRenderer> SpriteRenderers;

class MainTank
{
public:

	MainTank() { WhichRenderer = 0; AnimTime = 0; HP = 1; Direction = 0; AnimationAdditive = false; FireCooldown = 0; }

	int WhichRenderer;
	int AnimTime;
	int HP;
	int Direction;
	bool AnimationAdditive;
	int FireCooldown;
};

class Bullet
{
private: int WhichRenderer;//Bullet renderer
		 int Direction;//up left down right

public:
	void SetRenderer(int Which) { WhichRenderer = Which; }
	void SetDirection(int Dir) { Direction = Dir; }
	void SetPosition(SDL_Rect Pos) { SpriteRenderers[WhichRenderer].SetPosition(Pos); }

	int GetRenderer() { return WhichRenderer; }
	SDL_Rect GetPosition() { return SpriteRenderers[WhichRenderer].GetPosition();}
	int GetDirection() { return Direction; }
};

class EnemyTank
{
private: int WhichRenderer;// Enemy renderer
		 int MoveDirection = 0;//up left down right
		 int EnemyType = 0;//Normal, scout, normal+, superheavy
		 int EnemyHP = 1;//0-white, 1-yellow, 2-green, 3-red
		 int WhichAnim = 0;//0-normal, 1- +1

public:
	void SetRenderer(int Which) { WhichRenderer = Which; }
	void SetDirection(int Dir) { MoveDirection = Dir; }
	void SetPosition(SDL_Rect Pos) { SpriteRenderers[WhichRenderer].SetPosition(Pos); }
	void SetTypeAndHP(int Type) { EnemyType = Type, EnemyHP = 1; }
	void SetTypeAndHP(int Type, int HP) { EnemyType = Type; EnemyHP = HP; }

	int GetRenderer() { return WhichRenderer; }
	SDL_Rect GetPosition() { return SpriteRenderers[WhichRenderer].GetPosition(); }
	int GetDirection() { return MoveDirection; }
	int GetHP() { return EnemyHP; }
	int GetType() { return EnemyType; }
	int GetAnim() { return WhichAnim; }
};

void LoadBulletSprites()
{
	int x = 320;
	for (int i = 0; i < 4; i++)
	{
		SDL_Rect Texture;
		Texture.w = 4;
		Texture.h = 4;
		Texture.x = x;
		Texture.y = 0;
		BulletSprites.push_back(Texture);
		x += 4;
	}
}

vector<vector<SDL_Rect>> LoadOneTankMatrix(int start_x, int start_y)
{
	vector<vector<SDL_Rect>> TextureMatrix;
	for (uint8_t y = 0; y < 128; y+=16)
	{
		vector<SDL_Rect> TextureLine;
		for (uint8_t x = 0; x < 128; x+=16)
		{
			SDL_Rect Texture;
			Texture.w = 16;
			Texture.h = 16;
			Texture.x = x+ start_x;
			Texture.y = y+ start_y;
			TextureLine.push_back(Texture);
		}
		TextureMatrix.push_back(TextureLine);
	}
	return TextureMatrix;
}

void LoadAllTankSprites()
{
	AllTankSprites.push_back(LoadOneTankMatrix(0, 0));
	AllTankSprites.push_back(LoadOneTankMatrix(128, 0));
	AllTankSprites.push_back(LoadOneTankMatrix(0, 128));
	AllTankSprites.push_back(LoadOneTankMatrix(128, 128));
}

vector<Bullet> AllBullets;
vector<EnemyTank> AllEnemyTanks;

int WhichRenderer = 0;
void CreateSpriteRenderer(SDL_Rect sprite,int width, int height)
{
	SpriteRenderer NewRenderer;
	SDL_Rect Position;
	Position.x = 0;
	Position.y = 0;
	Position.w = width;
	Position.h = height;

	NewRenderer.SetTexture(sprite);
	NewRenderer.SetPosition(Position);
	NewRenderer.ResetScaledPosition();

	bool Found = false;
	for (int i = 0; i < SpriteRenderers.size(); i++)
		if (SpriteRenderers[i].IsMarkedForDeletion)
		{ Found = true; SpriteRenderers[i].SetAllValues(NewRenderer); WhichRenderer = i; break; }
	if (!Found) { SpriteRenderers.push_back(NewRenderer); WhichRenderer = SpriteRenderers.size() - 1; }
}

vector<MainTank> MainTanks;

void CreateMainTank(int WhichRenderer)
{
	MainTank NewTank;
	if (WhichRenderer == 0) CreateSpriteRenderer(AllTankSprites[0][0][0], 64, 64);
	else CreateSpriteRenderer(AllTankSprites[2][0][0], 64, 64);
	NewTank.WhichRenderer = WhichRenderer;
	NewTank.HP = 1;
	MainTanks.push_back(NewTank);
}

void FireBullet(int x, int y, int Dir)
{
	CreateSpriteRenderer(BulletSprites[Dir], 16, 16);

	SpriteRenderer * BulletRenderer = &SpriteRenderers[WhichRenderer];
	SDL_Rect Position;
	Position.x = x;
	Position.y = y;
	Position.w = 16;
	Position.h = 16;
	BulletRenderer->SetPosition(Position);

	Bullet NewBullet;
	AllBullets.push_back(NewBullet);
	AllBullets[AllBullets.size() - 1].SetRenderer(WhichRenderer);
	AllBullets[AllBullets.size() - 1].SetDirection(Dir);
}

void RenderAllSpriteRenderers(SDL_Renderer* Renderer, SDL_Texture* Tileset)
{
	for (int i = 0; i < SpriteRenderers.size(); i++)
	{
		if (SpriteRenderers[i].IsMarkedForDeletion)continue;
		SpriteRenderers[i].ScalePosition();
		SDL_RenderCopy(Renderer, Tileset, &SpriteRenderers[i].GetTexture(), &SpriteRenderers[i].GetScaledPosition());
	}
}

void Render(SDL_Renderer* Renderer, SDL_Texture* Tileset)
{
	SDL_RenderClear(Renderer);
	RenderAllSpriteRenderers(Renderer, Tileset);
	SDL_RenderPresent(Renderer);
}

const int TankSpeed = 4;
int Player_One_MoveCodes[] = { 'W','A','S','D',VK_SPACE };
int Player_Two_MoveCodes[] = { VK_UP,VK_LEFT,VK_DOWN,VK_RIGHT,VK_RETURN };
bool HandleMainTank(int WhichTank, int BehaviourCodes[])
{
	bool Pressed = false;

	int WhichTankRenderer = MainTanks[WhichTank].WhichRenderer;
	SDL_Rect Position = SpriteRenderers[WhichTankRenderer].GetPosition();
	if (GetAsyncKeyState(VK_ESCAPE) && 0x8000) return true;
	else if (GetAsyncKeyState(BehaviourCodes[3]) && 0x8000) { Position.x += TankSpeed; MainTanks[WhichTank].Direction = 6; Pressed = true; }
	else if (GetAsyncKeyState(BehaviourCodes[1]) && 0x8000) { Position.x -= TankSpeed; MainTanks[WhichTank].Direction = 2; Pressed = true;}
	else if (GetAsyncKeyState(BehaviourCodes[0]) && 0x8000) { Position.y -= TankSpeed; MainTanks[WhichTank].Direction = 0; Pressed = true;}
	else if (GetAsyncKeyState(BehaviourCodes[2]) && 0x8000) { Position.y += TankSpeed; MainTanks[WhichTank].Direction = 4; Pressed = true;}

	if (GetAsyncKeyState(BehaviourCodes[4]) && 0x8000 && MainTanks[WhichTank].FireCooldown <= 0)
	{
		MainTanks[WhichTank].FireCooldown = 32;
		int x = Position.x;
		int y = Position.y;
		if (MainTanks[WhichTank].Direction == 0) FireBullet(x+32-8, y-8, 0);
		else if (MainTanks[WhichTank].Direction == 2) FireBullet(x-8, y+32-8, 1);
		else if (MainTanks[WhichTank].Direction == 4) FireBullet(x+32-12, y+64-8, 2);
		else if (MainTanks[WhichTank].Direction == 6) FireBullet(x+64-8, y+32-8, 3);
	}

	if (Pressed)
	{
		if (MainTanks[WhichTank].AnimTime == 0)
		{
			MainTanks[WhichTank].AnimTime = 4; MainTanks[WhichTank].AnimationAdditive = !MainTanks[WhichTank].AnimationAdditive;
		}
		else MainTanks[WhichTank].AnimTime--;
	}

	if (MainTanks[WhichTank].FireCooldown > 0)MainTanks[WhichTank].FireCooldown--;

	if (Position.x < 0)Position.x = 0;
	else if (Position.x > 800)Position.x = 800;

	if (Position.y < 0)Position.y = 0;
	else if (Position.y > 800)Position.y = 800;

	int A = 0;
	int B = MainTanks[WhichTank].HP-1;
	int Animation = MainTanks[WhichTank].Direction;
	if (BehaviourCodes[0] == VK_UP) A = 2;
	if(MainTanks[WhichTank].AnimationAdditive) SpriteRenderers[WhichTankRenderer].SetTexture(AllTankSprites[A][B][Animation]);
	else SpriteRenderers[WhichTankRenderer].SetTexture(AllTankSprites[A][B][(Animation+1)]);

	SpriteRenderers[WhichTankRenderer].SetPosition(Position);

	return false;
}

void HandleAllEnemyTanks()
{
	for (int i = 0; i < AllEnemyTanks.size(); i++)
	{
		int HP = AllEnemyTanks[i].GetHP();
		int Dir = AllEnemyTanks[i].GetDirection();
		int A = 0;
		if (HP == 1) A = 1;
		else if (HP == 2) A = 0;
		else A = HP - 1;
		SpriteRenderers[AllEnemyTanks[i].GetRenderer()].SetTexture(AllTankSprites[A][AllEnemyTanks[i].GetType()+4][Dir*2+ AllEnemyTanks[i].GetAnim()]);
	}
}

int BulletSpeed = 8;
void HandleAllBullets()
{
	for (int i = 0; i < AllBullets.size(); i++)
	{
		SDL_Rect position = AllBullets[i].GetPosition();
		int Dir = AllBullets[i].GetDirection();

		if (position.x < 0 || position.x > 864 ||
			position.y < 0 || position.y > 864)
		{
			SpriteRenderers[AllBullets[i].GetRenderer()].IsMarkedForDeletion = true;
			AllBullets.erase(AllBullets.begin() + i);
			i--;
			continue;
		}

		if (Dir == 0) position.y -= BulletSpeed;
		else if (Dir == 1) position.x -= BulletSpeed;
		else if (Dir == 2) position.y += BulletSpeed;
		else position.x += BulletSpeed;

		AllBullets[i].SetPosition(position);
	}
}

void CreateAnEnemy(int x, int y, int Type, int HP)
{
	CreateSpriteRenderer(AllTankSprites[0][0][0], 64, 64);
	EnemyTank NewEnemy;
	SDL_Rect Position;
	Position.x = x;
	Position.y = y;
	Position.w = 64;
	Position.h = 64;
	NewEnemy.SetTypeAndHP(Type,HP);
	NewEnemy.SetRenderer(WhichRenderer);
	NewEnemy.SetPosition(Position);
	AllEnemyTanks.push_back(NewEnemy);
}

int main(int argc, char* argv[])
{
	SDL_Init(SDL_INIT_EVERYTHING);
	SDL_Window* Window = SDL_CreateWindow("Title", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, CurrentRes, CurrentRes, SDL_WINDOW_SHOWN);
	SDL_Renderer* Renderer = SDL_CreateRenderer(Window, -1, SDL_RENDERER_ACCELERATED);

	SDL_Surface* Surface = SDL_LoadBMP("Tileset.bmp");
	SDL_Texture* Tileset = SDL_CreateTextureFromSurface(Renderer, Surface);
	SDL_FreeSurface(Surface);

	LoadAllTankSprites();
	LoadBulletSprites();

	CreateMainTank(0);
	CreateMainTank(1);

	CreateAnEnemy(400, 0, 0, 1);

	for (;;)
	{
		SDL_Delay(17);

		if (HandleMainTank(0, Player_One_MoveCodes))break;
		if (HandleMainTank(1, Player_Two_MoveCodes))break;
		HandleAllBullets();
		HandleAllEnemyTanks();

		Render(Renderer, Tileset);
	}

	SDL_DestroyRenderer(Renderer);
	SDL_DestroyWindow(Window);
	SDL_Quit();
	return 0;
}